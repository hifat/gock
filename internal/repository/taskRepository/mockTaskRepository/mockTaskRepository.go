// Code generated by MockGen. DO NOT EDIT.
// Source: ./task.go

// Package mockTaskRepository is a generated GoMock package.
package mockTaskRepository

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	taskDomain "github.com/hifat/gock/internal/domain/taskDomain"
	gomock "go.uber.org/mock/gomock"
)

// MockITaskRepository is a mock of ITaskRepository interface.
type MockITaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockITaskRepositoryMockRecorder
}

// MockITaskRepositoryMockRecorder is the mock recorder for MockITaskRepository.
type MockITaskRepositoryMockRecorder struct {
	mock *MockITaskRepository
}

// NewMockITaskRepository creates a new mock instance.
func NewMockITaskRepository(ctrl *gomock.Controller) *MockITaskRepository {
	mock := &MockITaskRepository{ctrl: ctrl}
	mock.recorder = &MockITaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITaskRepository) EXPECT() *MockITaskRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockITaskRepository) Create(ctx context.Context, req *taskDomain.TaskRequest) (*taskDomain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req)
	ret0, _ := ret[0].(*taskDomain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockITaskRepositoryMockRecorder) Create(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITaskRepository)(nil).Create), ctx, req)
}

// Delete mocks base method.
func (m *MockITaskRepository) Delete(ctx context.Context, taskID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockITaskRepositoryMockRecorder) Delete(ctx, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockITaskRepository)(nil).Delete), ctx, taskID)
}

// Get mocks base method.
func (m *MockITaskRepository) Get(ctx context.Context, res *[]taskDomain.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, res)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockITaskRepositoryMockRecorder) Get(ctx, res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockITaskRepository)(nil).Get), ctx, res)
}

// GetByID mocks base method.
func (m *MockITaskRepository) GetByID(ctx context.Context, res *taskDomain.Task, taskID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, res, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByID indicates an expected call of GetByID.
func (mr *MockITaskRepositoryMockRecorder) GetByID(ctx, res, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockITaskRepository)(nil).GetByID), ctx, res, taskID)
}

// Update mocks base method.
func (m *MockITaskRepository) Update(ctx context.Context, req *taskDomain.TaskRequest, taskID uuid.UUID) (*taskDomain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, req, taskID)
	ret0, _ := ret[0].(*taskDomain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockITaskRepositoryMockRecorder) Update(ctx, req, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockITaskRepository)(nil).Update), ctx, req, taskID)
}
